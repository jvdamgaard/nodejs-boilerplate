/*
*
*  Four-column grid active
*  -----------------------
*
*/

@column: 100% / 16;

// Mixins
#grid {
  .width(@cols, @base) {
    width: 16/@base * @cols * @column;
  }
  .left-offset( @cols, @base) {
    margin-left: 16/@base * @cols * @column;
  }
  .right-offset(@cols, @base) {
    margin-right: 16/@base * @cols * @column;
  }
}

// Translate int to string
 @0: zero;
 @1: one;
 @2: two;
 @3: three;
 @4: four;
 @5: five;
 @6: six;
 @7: seven;
 @8: eight;
 @9: nine;
@10: ten;
@11: eleven;
@12: twelve;
@13: thirteen;
@14: fourteen;
@15: fithteen;
@16: sixteen;

// Main mixin
.setBase(@num) {
  .setCols(@num, @num, @@num, @@num);
  @offset: @num - 1;
  .setLeftOffset(@offset, @num, @@offset, @@num);
  .setRightOffset(@offset, @num, @@offset, @@num);
  .setNestedColumns(@offset, @num, @@offset, @@num);
}

// Recursive set cols
.setCols(@col, @base, @colNamespace, @baseNamespace) when (@col > 0) {
  &.@{colNamespace}-by-@{baseNamespace} {
    #grid > .width(@col, @base);
  }

  @newCol: @col - 1;
  @newColNamespace: @@newCol;
  .setCols(@newCol, @base, @newColNamespace, @baseNamespace);
}
.setCols(@col, @base, @colNamespace, @baseNamespace) when (@col = 0) {
  &.@{colNamespace}-by-@{baseNamespace} {
    display: none;
  }
}

// Recursive set offset
.setLeftOffset(@col, @base, @colNamespace, @baseNamespace) when (@col > 0) {
  &.left-offset-@{colNamespace}-by-@{baseNamespace} {
    #grid > .left-offset(@col, @base);
  }

  @newCol: @col - 1;
  @newColNamespace: @@newCol;
  .setLeftOffset(@newCol, @base, @newColNamespace, @baseNamespace);
}
.setRightOffset(@col, @base, @colNamespace, @baseNamespace) when (@col > 0) {
  &.right-offset-@{colNamespace}-by-@{baseNamespace} {
    #grid > .left-offset(@col, @base);
  }

  @newCol: @col - 1;
  @newColNamespace: @@newCol;
  .setRightOffset(@newCol, @base, @newColNamespace, @baseNamespace);
}

// Recursive set nested columns
.setNestedColumns(@col, @base, @colNamespace, @baseNamespace) when (@col > 1) {
  &.@{colNamespace}-by-@{baseNamespace} {
    @newCol: @col - 1;
    @newColNamespace: @@newCol;
    .setNestedCol(@newCol, @base, @col, @newColNamespace, @baseNamespace);
  }

  @newCols: @col - 1;
  @newColsNamespace: @@newCols;
  .setNestedColumns(@newCols, @base, @newColsNamespace, @baseNamespace);
}

.setNestedCol(@col, @base, @nested, @colNamespace, @baseNamespace) when (@col > 0) {
  .@{colNamespace}-by-@{baseNamespace} {
    width: 100%/@nested*@col;
  }
  .left-offset-@{colNamespace}-by-@{baseNamespace} {
    margin-left: 100%/@nested*@col;
  }
  .right-offset-@{colNamespace}-by-@{baseNamespace} {
    margin-right: 100%/@nested*@col;
  }

  @newCol: @col - 1;
  @newColNamespace: @@newCol;
  .setNestedCol(@newCol, @base, @col, @newColNamespace, @baseNamespace)
}

// columns {
//   &.four-by-eight {

//   }
//   &-left-offset-two-by-eight {

//   }
//   &.four-by-eight {
//     .two-by-eight {}
//   }
// }


.row {
  margin: 0 @line/2;
  .clearfix;
  .row {
    margin: 0 -@line/2;
  }
}

.column, .columns {
  padding : 0 @line/2;
  float   : left;
  display : block;
  height  : 100%;

  .setBase(4);
}


/*
*
*  Eight-column grid active
*  ------------------------
*
*/

/* @media screen and (min-width: 700px) */
@media screen and (min-width: @breakpoint-eight-columns) {

  .column, .columns {
    .setBase(8);
  }
}


/*
*
*  Sixteen-column grid active
*  --------------------------
*
*/

/* @media screen and (min-width: 1440px) */
@media screen and (min-width: @breakpoint-sixteen-columns) {

  .column, .columns {
    .setBase(16);
  }
}



/*
*
*  Show grid wih Ctrl+g i development mode
*  --------------------------
*
*/

#grid {
  position: absolute;
  width: 100%;
  height: 0;
  top: 0;
  left: 0;
  z-index: -100;
  white-space: nowrap;
  overflow: hidden;
  .row, .column, .columns {
    height: 100%;
  }
  .column.one {
    .transition(~"all 500ms ease-in-out");
    width: 100%/16;
    padding: 0;

    &:nth-child(4n+1) {
      padding-left: @line/2;
    }
    &:nth-child(4n) {
      padding-right: @line/2;
    }
  }
  .fill {
    width: 100%;
    height: 100%;
    background: rgba(255,0,0,0);
    .transition(~"background 1s ease-in-out");

    .show-horizontal-line {
        height: @line/2;
        border-bottom: 1px solid rgba(255,0,0,0);
    }

  }
  &.active {
    z-index: 100;
    .fill {
      background: rgba(255,0,0,0.1);
      .show-horizontal-line {
        border-bottom: 1px dashed rgba(255,0,0,0.2);
        &:nth-child(2n+1) {
          border-bottom: 1px dotted rgba(255,0,0,0.1);
        }
      }
    }
  }
}

// 8 columns
@media screen and (min-width: @breakpoint-eight-columns) {
  #grid {
    .column.one {
      &:nth-child(4n+2) {
        padding-right: @line/2;
      }
      &:nth-child(4n+3) {
        padding-left: @line/2;
      }
    }
  }
}

// 16 columns
@media screen and (min-width: @breakpoint-sixteen-columns) {
  #grid {
    .column.one {
      &:nth-child(2n+1) {
        padding-right: @line/2;
      }
      &:nth-child(2n+2) {
        padding-left: @line/2;
      }
    }
  }
}
